=====================================================================
README file in the ProofAnalysisFramework package

$Name:  $

Developers: Ana Yaiza Rodriguez Marrero, 
	    Isidro Gonzalez Caballero, 
	    Alberto Cuesta Noriega

Additional documentation:
http://www.hep.uniovi.es/mediawiki-1.12.0/index.php/ProofAnalysisFramework


=====================================================================

OUTLINE:

* INTRODUCTION (missing)

* SETTING THE ANALYSIS
  - CONFIGURING THE ENVIRONMENT
  - THE ANALYSIS FILE
  - THE CONFIGURATION FILE
  - CHECKING THE COMPILATION (needs revision)

* PROOF MODES
  - USING PROOF-LITE
  - USING PROOF CLUSTER
  - USING PROOF ON DEMAND (PoD)
  - USING PROOF CLUSTER (missing)
  - USING THE SEQUENTIAL MODE (FOR DEBUGGING)

* CLEANNING THE ENVIRONMENT

* FOR THE IMPATIENT USER

=====================================================================

-----------------------------------------------------------
INTRODUCTION
------------

Missing...




-----------------------------------------------------------
SETTING THE ANALYSIS
--------------------

- CONFIGURING THE ENVIRONMENT

The PROOF Analysis Framework environment is configured by sourcing the
PAF_setup.sh file where PAF was installed.


- THE ANALYSIS FILE

The  user analysis  class should  inherit from  PAFAnalysis.h. Several
examples  are provided  under  $PAFPATH/examples/. The  code there  is
widely documented. Contact the developers for more information

- THE CONFIGURATION FILE

The analysis is usually launched through a ROOT macro (see for example
$PAFPATH/examples/RunTree.C) where all the analysis inputs can be set:
PROOF Mode (see next point), input files, output file name, input
parameters, etc... Configuration is done through the global object
gPAFOptions. See $PAFPATH/scripts/PAFOptions.h for details on the
possible options

- CHECKING THE COMPILATION

NOTE: This check is currently no completely operational. Trying
sequential mode with just one event should be a good test too.

You can check if your analysis code compiles with ROOT correctly,
before running it using any of the PROOF available modes.

From the command line:

[host] > ./scripts/checkcompilation # default: check MyAnalysisTESCO
[host] > ./scripts/checkcompilation MiniTrees # check MyAnalysisMiniTrees





-----------------------------------------------------------
PROOF MODES
-----------

- USING PROOF LITE 

ProofLite mode allows you to profit from your multicore architecture
transparently. No special installation is needed and PROOF will use
all the cores available.

[1] Edit the file RunPROOF.C to set the mode:

    gPAFOptions->proofMode = kLite;

    And set other parameters related to your analysis: input data
    sample, output file name, etc... 

[2] Then just run this macro:

    [host] > root -l 
    root[0] > .x RunPROOF.C
    ...



- USING PROOF CLUSTER

ProofCluster mode allows you to run your analysis in many more nodes
by using the batch cluster available at your site. Users need to
perform an extra step, but most of the procedure has been automatized.

[1] Edit the file RunPROOF.C to set the mode:

    gPAFOptions->proofMode = kCluster;

    And set other parameters related to your analysis: input data
    sample, output file name, etc... 

[2] You need to add the path to the PROOF Cluster installation to your
    PATH variable.

    [host] > export PATH=$PATH:/gpfs/csic_projects/cms/PROOF  #bash

    or

    [host] > setenv PATH "${PATH}:/gpfs/csic_projects/cms/PROOF"  #tcsh

[3] Finally, just run the macro:

    [host] > root -l
    root[0] > .x RunPROOF.C
    ...


[4] Once you do not need anymore the workers you asked for, please
    free them:

    [host] > endproof



- USING PROOF ON DEMAND (PoD)

PoD mode allows you to run your analysis in many nodes by using the
batch cluster available at your site. Users need to perform an extra
step, but most of the procedure has been automatized.

NOTE: It is currently only available for the bash shell.

[1] Edit the file RunPROOF.C to set the mode:

    gPAFOptions->proofMode = kPoD;

    And set other parameters related to your analysis: input data
    sample, output file name, etc... 

[2] You need to set the environment to find PoD (centrally installed
    in e.g. /opt/PoD).

    [host] > source /opt/PoD/PoD_env.sh


[3] Finally, just run the macro:

    [host] > root -l
    root[0] > .x RunPROOF.C
    ...


[4] Once you do not need anymore the workers you asked for, please
    free them:

    [host] > endproof



- USING PROOF CLOUD

  Missing...



- USING THE SEQUENTIAL MODE (FOR DEBUGGING)

You may run your analysis in sequential mode. It is usefull to debug
the code since it does not use any PROOF feature.

[1] Edit the file RunPROOF.C to set the mode:

    gPAFOptions->proofMode = kSequential;

    And set other parameters related to your analysis: input data
    sample, output file name, etc...

[2] Then just run this macro:

    [host] > root -l 
    root[0] > .x RunPROOF.C
    ...
    root[n] > .q







-----------------------------------------------------------

CLEANING THE ENVIRONMENT
------------------------

If you change some of the core packages or get some inestability on
the system, you may need to reset the proof environment. In such a
case, please run resetpaf.

[host] > resetpaf

Type 'resetpaf -h' to get usage information.



-----------------------------------------------------------
FOR THE IMPATIENT USER
----------------------

- PROOF LITE

(edit RunProof.C and set gPAFOptions->proofMode to kLite)

[host] > source /opt/root/bin/thisroot.sh #Or wherever you have installed ROOT
[host] > source /opt/PAF/PAF_setup.sh     #Or wherever you have installed PAF
[host] > root -l 
root[0] .x RunPROOF.C
...
root[n] .q


- PROOF CLUSTER


[host] > export PATH=$PATH:/gpfs/csic_projects/cms/PROOF  #bash
[host] > source /opt/root/bin/thisroot.sh #Or wherever you have installed ROOT
[host] > source /opt/PAF/PAF_setup.sh     #Or wherever you have installed PAF

(edit RunProof.C and set gPAFOptions->proofMode to kCluster)

[host] > root -l 
root[0] .x RunPROOF.C 
...
root[n] .q
[host] > endproof



- PROOF ON DEMAND (PoD)

[host] > source /opt/root/bin/thisroot.sh #Or wherever you have installed ROOT
[host] > source /opt/PAF/PAF_setup.sh     #Or wherever you have installed PAF
[host] > source /opt/PoD/PoD_env.sh       #Or wherever you have installed PoD

(edit RunProof.C and set gPAFOptions->proofMode to kPoD)

[host] > root -l 
root[0] .x RunPROOF.C 
...
root[n] .q
[host] > endproof



- SEQUENTIAL

(edit RunProof.C and set gPAFOptions->proofMode to kSequential)

[host] > source /opt/root/bin/thisroot.sh #Or wherever you have installed ROOT
[host] > source /opt/PAF/PAF_setup.sh     #Or wherever you have installed PAF
[host] > root -l 
root[0] .x RunPROOF.C
...
root[n] .q
