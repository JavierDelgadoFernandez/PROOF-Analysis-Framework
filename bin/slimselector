#!/bin/bash

####################################################################
#    FILE: slimselector
# AUTHORS: I. Gonzalez Caballero
#    DATE: 2012
#
# CONTENT: This script finds out if all the possible branches in a
#          selector are used in a list of files creating a new 
#          optimised selector with this information
#
####################################################################

################
# Setup some initial variables

# set to 1 to enable debug
DEBUG=0

# set to 1 to enable verbosity
VERBOSE=0

# set to 1 to enable full debug
FULLDEBUG=0

if [ $FULLDEBUG -eq 1 ] ; then
    set -x
    export FULLDEBUG
fi



################
# Funciton to print out some help

usage() {
    cat <<EOF

NAME:
   $0 - This script finds out if all the possible branches in a
        selector are used in a list of files creating a new optimised
        selector with this informationas expected.

SYNOPSIS:

   $0 -h|--help
   $0 [-d] [-v] -s selctor files

OPTIONS
   -s selector: Sets the name of the initial selector.
                WARNING: The file will be overriden with the new code

            -v: Verbose print out

            -d: Prints out lots of debug information

     -h|--help: Prints this help

         files: List of files to search in


EOF
exit
}


################
# Debug and info messages go through these functions

debug_msg() {
    if [ $DEBUG -eq 1 ] ; then
        echo "PAF [D] - slimselector - $@" 1>&2
    fi
}

info_msg() {
    if [ $VERBOSE -eq 1 ]; then
	echo "PAF [I] $@" 1>&2
    fi
}



################
# Manage command line parameters

# Initialize some variables
goodvariables=""
analysisfiles=""

# Check for no parameters
if [ -z $1 ]; then
    echo "ERROR: Missing selector and analysis files"
    usage
fi

# Revise parameters
while [ "$1" != "" ]; do
    case $1 in
        -d)
            DEBUG=1
            ;;
        -v)
            VERBOSE=1
            ;;
        -s)
            shift
            selector=$1
            ;;
        -h | --help )
            usage
            exit
            ;;
        * )
            analysisfiles="$analysisfiles $1"
    esac
    shift
done

# Check for missing mandatory parameters
if [ -z $selector ]; then
    echo "ERROR: I need a selector"
    usage
fi
if [ -z "$analysisfiles" ]; then
    echo "ERROR: I need the files to be searched in"
    usage
fi

# Som output
debug_msg Selector File: $selector
debug_msg Analysis Files: $analysisfiles
debug_msg Verbosity: $VERBOSE
debug_msg Debug: $DEBUG




################
# Do the work


###
# Get the list of variables from the selector
info_msg "+ Finding out the names of all variables..."
variables=`grep "fChain->SetBranchAddress(" $selector | cut -d\" -f 2`
debug_msg $variables

###
# Iterate over the variables and the files to see which of them are used
# Currently a simple grep is done for the matching.
# The information is stored in $goodvariables
info_msg "+ Iterating over files to search if variables are used..."
for var in $variables; do
    for file in $analysisfiles; do
	debug_msg "+ Testing $var in $file"
	grep $var $analysisfiles > /dev/null
	if [ $? == 0 ]; then
	debug_msg "   - Found!"
	    goodvariables="$goodvariables $var"
	    break
	fi
    done
done

debug_msg "Variables used in the analysis (may be repeated): $goodvariables"

goodvariables=`echo "$goodvariables" |sed 's| |\n|g'| uniq`

info_msg "   - Variables used in the analysis: " $goodvariables



###
# Now comment all the lines not having the variables used

info_msg "+ Commenting unneeded code..."

# Comment all the SetBranchAddress lines and store the file in memory
anfile=`sed 's|fChain->SetBranchAddress("|//fChain->SetBranchAddress("|g' $selector`

# Uncomment the lines with variables been used
for gvar in $goodvariables; do
    debug_msg gvar=$gvar
    anfile=`echo "$anfile"| sed "s|//fChain->SetBranchAddress(\"$gvar\"|fChain->SetBranchAddress(\"$gvar\"|g"`
done

# Create temporary file to store the modifications
tmpselector=`mktemp`
touch $tmpselector

# Store the modified in-memory file to the temporary file
echo "$anfile" > $tmpselector

# Replace the original selector with the temporary
mv $selector $selector.orig
mv $tmpselector $selector